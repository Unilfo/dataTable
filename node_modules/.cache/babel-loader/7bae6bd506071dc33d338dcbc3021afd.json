{"ast":null,"code":"import _toConsumableArray from \"F:\\\\Application\\\\dataTable\\\\data-table\\\\data-table-phone\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nexport default function getNewValue(value, oldValue, multiple) {\n  if (!multiple) {\n    return value;\n  }\n\n  var newValue = null;\n\n  if (oldValue && !Array.isArray(oldValue)) {\n    newValue = [oldValue];\n  } else if (!oldValue) {\n    newValue = [];\n  } else {\n    newValue = _toConsumableArray(oldValue);\n  }\n\n  var valueIndex = newValue.findIndex(function (val) {\n    return val === value;\n  });\n\n  if (valueIndex >= 0) {\n    newValue.splice(valueIndex, 1);\n  } else {\n    newValue.push(value);\n  }\n\n  return newValue;\n}","map":{"version":3,"sources":["F:/Application/dataTable/data-table/data-table-phone/node_modules/react-select-search/dist/esm/lib/getNewValue.js"],"names":["getNewValue","value","oldValue","multiple","newValue","Array","isArray","valueIndex","findIndex","val","splice","push"],"mappings":";AAAA,eAAe,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AAC7D,MAAI,CAACA,QAAL,EAAe;AACb,WAAOF,KAAP;AACD;;AAED,MAAIG,QAAQ,GAAG,IAAf;;AAEA,MAAIF,QAAQ,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,QAAd,CAAjB,EAA0C;AACxCE,IAAAA,QAAQ,GAAG,CAACF,QAAD,CAAX;AACD,GAFD,MAEO,IAAI,CAACA,QAAL,EAAe;AACpBE,IAAAA,QAAQ,GAAG,EAAX;AACD,GAFM,MAEA;AACLA,IAAAA,QAAQ,sBAAOF,QAAP,CAAR;AACD;;AAED,MAAMK,UAAU,GAAGH,QAAQ,CAACI,SAAT,CAAmB,UAAAC,GAAG;AAAA,WAAIA,GAAG,KAAKR,KAAZ;AAAA,GAAtB,CAAnB;;AAEA,MAAIM,UAAU,IAAI,CAAlB,EAAqB;AACnBH,IAAAA,QAAQ,CAACM,MAAT,CAAgBH,UAAhB,EAA4B,CAA5B;AACD,GAFD,MAEO;AACLH,IAAAA,QAAQ,CAACO,IAAT,CAAcV,KAAd;AACD;;AAED,SAAOG,QAAP;AACD","sourcesContent":["export default function getNewValue(value, oldValue, multiple) {\n  if (!multiple) {\n    return value;\n  }\n\n  let newValue = null;\n\n  if (oldValue && !Array.isArray(oldValue)) {\n    newValue = [oldValue];\n  } else if (!oldValue) {\n    newValue = [];\n  } else {\n    newValue = [...oldValue];\n  }\n\n  const valueIndex = newValue.findIndex(val => val === value);\n\n  if (valueIndex >= 0) {\n    newValue.splice(valueIndex, 1);\n  } else {\n    newValue.push(value);\n  }\n\n  return newValue;\n}"]},"metadata":{},"sourceType":"module"}